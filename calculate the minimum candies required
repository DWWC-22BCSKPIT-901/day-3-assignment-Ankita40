#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Function to calculate the minimum candies required
int candy(vector<int>& ratings) {
    int n = ratings.size();
    vector<int> candies(n, 1);
    
    // Forward pass: Ensure right neighbor has more candies if the rating is higher
    for (int i = 1; i < n; ++i) {
        if (ratings[i] > ratings[i - 1]) {
            candies[i] = candies[i - 1] + 1;
        }
    }
    
    // Backward pass: Ensure left neighbor has more candies if the rating is higher
    for (int i = n - 2; i >= 0; --i) {
        if (ratings[i] > ratings[i + 1]) {
            candies[i] = max(candies[i], candies[i + 1] + 1);
        }
    }
    
    return accumulate(candies.begin(), candies.end(), 0);
}

int main() {
    vector<int> ratings = {1, 0, 2}; // Example input
    cout << "Minimum candies: " << candy(ratings) << endl;
    return 0;
}
